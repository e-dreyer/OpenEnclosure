# ESPHome Node settings
esphome:
  name: enclosure
  comment: Enclosure for a 3D printer with multiple sensors and AC dimmer for heating controlled by a PID
  friendly_name: enclosure

  # Automation when booting
  on_boot:
    priority: 600
    then:
      - logger.log: "Booting"
      - light.turn_off: enclosure_heating_lights
      # Change OTA password after boot
      # - lambda: |-
      #   id(my_ota).set_auth_password("New password");

  # Automation when shutting down
  on_shutdown:
    priority: 600
    then:
      - logger.log: "Shuting down"
      - light.turn_off: enclosure_heating_lights

# ESPHome Processor settings
esp32:
  board: esp32doit-devkit-v1
  framework:
    type: arduino

#ESPHome Enable logging
logger:
  level: DEBUG

# OTA update settings
ota:
  password: !secret ota_password

  # Automation on start
  on_begin:
    then:
      - logger.log: "OTA start"

  # Automation during upload
  on_progress:
    then:
      - logger.log:
          format: "OTA progress %0.1f%%"
          args: ["x"]

  # Automation on end
  on_end:
    then:
      - logger.log: "OTA end"

  # Automation on error
  on_error:
    then:
      - logger.log:
          format: "OTA update error %d"
          args: ["x"]

# Wifi settings
wifi:
  # Credentials
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  # IP settings
  manual_ip:
    static_ip: !secret wifi_ip
    gateway: !secret wifi_gateway
    subnet: !secret wifi_subnet

  # Wifi-fallback settings for access point
  ap:
    ssid: !secret ap_ssid
    password: !secret ap_password

# ESPHome Captive Portal settings
captive_portal:

# I2C Configuration
i2c:
  sda: GPIO21
  scl: GPIO22
  scan: true
  id: bus_a
  frequency: 1kHz

# ESPHome MQTT settings 
mqtt:
  # Credentials
  broker: !secret mqtt_broker # Broker IP
  username: !secret mqtt_username # Broker username
  password: !secret mqtt_password # Broker password

  # Topic to post on-connect
  birth_message:
    topic: enclosure/status
    payload: online

  # Topic to post on-disconnect
  will_message:
    topic: enclosure/status
    payload: offline

  # Subscribe to JSON format topics
  on_json_message:
    
    # Get the temperature target
    - topic: cr6semainsail/klipper/state/temperature_sensor enclosure_temperature/target # Topic from Moonraker Config
      then:
      # Set the PID control
      - climate.control:
          id: enclosure_heating_lights_climate # Climate controller
          mode: HEAT
          swing_mode: BOTH

          target_temperature: !lambda |-
            return x["value"];

# ESPHome Climate PID control
climate:
  - platform: pid
    id: enclosure_heating_lights_climate # ID of the PID controller
    name: "Enclosure Heating Lights Climate"
    sensor: enclosure_temperature_sensor # Sensor to use as the input
    default_target_temperature: 21°C

    heat_output: enclosure_heating_lights_dimmer # The ESPHome output

    # Control parameters calculated by autotune
    control_parameters:
      kp: 1.01859 #0.29030
      ki: 0.00328 #0.00087
      kd: 0.0 #79.04271

      output_averaging_samples: 30      # smooth the output over 10 samples
      derivative_averaging_samples: 30  # smooth the derivative value over 10 samples

    # Set deadband to + or - 1.0°C
    deadband_parameters:
      threshold_high: 2.0°C
      threshold_low: -2.0°C

    # These settings are required for correct behavior in HomeAssistant
    visual:
      min_temperature: 0 °C
      max_temperature: 65 °C
      temperature_step: 1 °C

# ESPHome sensors
sensor:

  # Show PID parameters on MQTT
  - platform: pid
    name: "Enclosure Heating Lights PID Result"
    id: enclosure_heating_lights_pid_result
    climate_id: enclosure_heating_lights_climate

    type: RESULT
    state_class: "measurement"
    accuracy_decimals: 2

    filters:
      # Help scale the PID output to a value between 0 and 255
      - calibrate_linear:
          - 0.0 -> 0.0
          - 100.0 -> 255.0
      # Send a heartbeat value to smooth PID output
      - heartbeat: 1.0s
      # Sliding window to smooth the temperature
      - sliding_window_moving_average:
          window_size: 30
          send_every: 30
      - clamp:
          min_value: 0
          max_value: 255
      # Return 0 for negative values
      - lambda: !lambda |-
          if (x < 0) {
            return 0;
          }
          else {
            return x;
          }

    # ESP Home Documentation: https://esphome.io/components/sensor/sgp4x
  - platform: sgp4x
    id: air_quality_sensor
    i2c_id: bus_a
    address: 0x59
    voc:
      name: "VOC Index"
      id: voc_index
      algorithm_tuning:
        index_offset: 200
        learning_time_offset_hours: 72
        learning_time_gain_hours: 72
        gating_max_duration_minutes: 0
        std_initial: 50
        gain_factor: 230
    compensation:
      humidity_source: enclosure_humidity_sensor
      temperature_source: enclosure_temperature_sensor
    update_interval: 30s
    
  - platform: dht
    model: DHT22_TYPE2
    pin:
      # Connected to GPI22 on the ESP32.
      number: GPIO32
      mode:
        input: true
        pullup: false
    
    temperature:
      name: "Enclosure Temperature"
      id: enclosure_temperature_sensor
      state_class: "measurement"
      accuracy_decimals: 1

      filters:
        - heartbeat: 1.0s

    humidity:
      name: "Enclosure Humidity"
      id: enclosure_humidity_sensor
      state_class: "measurement"
      accuracy_decimals: 1

      filters:
        - heartbeat: 1.0s

  # Used for debugging purposes
  - platform: pid
    name: "Enclosure Heating Lights PID Error"
    id: enclosure_heating_lights_pid_error
    climate_id: enclosure_heating_lights_climate
    type: ERROR
    state_class: "measurement"
    accuracy_decimals: 1
    filters:
      - heartbeat: 1.0s

  - platform: pid
    name: "Enclosure Heating Lights PID Proportional"
    id: enclosure_heating_lights_pid_proportional
    climate_id: enclosure_heating_lights_climate
    type: PROPORTIONAL
    state_class: "measurement"
    accuracy_decimals: 1

  - platform: pid
    name: "Enclosure Heating Lights PID Integral"
    id: enclosure_heating_lights_pid_integral
    climate_id: enclosure_heating_lights_climate
    type: INTEGRAL
    state_class: "measurement"
    accuracy_decimals: 1
    
  - platform: pid
    name: "Enclosure Heating Lights PID Derivative"
    id: enclosure_heating_lights_pid_derivative
    climate_id: enclosure_heating_lights_climate
    type: DERIVATIVE
    state_class: "measurement"
    accuracy_decimals: 1

# ESPHome Output
output:

  # Triac AC dimmer used to control the heating lights in the enclosure
  - platform: ac_dimmer
    id: enclosure_heating_lights_dimmer

    gate_pin: GPIO12 # This is the PWM Output
    
    zero_cross_pin:
      number: GPIO5 # The is the ZC input
      mode:
        input: true

    method: leading

    min_power: 10%
    max_power: 100%
    zero_means_zero: true # A value of zero turns the PID off

switch:
  # Relay 1
  - platform: gpio
    name: "Printer Power"
    id: enclosure_relay_1
    pin:
      number: 33
      inverted: false # Start in OFF state
    retain: true # Required to have the state to be visible to services such as Moonraker
    command_retain: true #  Required to have the command to be visible to services such as Moonraker
    restore: RESTORE_DEFAULT_OFF # Attempt to restore state but default to OFF

  # Relay 4
  - platform: gpio
    name: "LED Lights Power"
    id: enclosure_relay_4
    pin:
      number: 25
      inverted: false # Start in OFF state
    retain: true # Required to have the state to be visible to services such as Moonraker
    command_retain: true #  Required to have the command to be visible to services such as Moonraker
    restore: RESTORE_DEFAULT_OFF # Attempt to restore state but default to OFF

# ESPHome Lights
light:
  # This is the heating lights used in the enclosure
  - platform: monochromatic
    name: "Enclosure Heating Lights"
    id: enclosure_heating_lights

    output: enclosure_heating_lights_dimmer # Is controlled by the dimmer

# ESPHome Button
button:
  # Autotune functionality for the PID in HomeAssistant
  - platform: template
    name: "Enclosure Heating Lights PID Autotune"
    id: enclosure_heating_lights_pid_autotune

    on_press:
      - climate.pid.autotune: enclosure_heating_lights_climate