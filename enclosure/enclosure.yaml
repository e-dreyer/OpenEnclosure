# ESPHome Node settings
esphome:
  name: printer-enclosure

# ESPHome Processor settings
esp32:
  board: esp32doit-devkit-v1
  framework:
    type: arduino

# ESPHome Enable logging
logger:

# OTA update settings
ota:
  password: !secret ota_password

# Wifi settings
wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  # Wifi-fallback settings for access point
  ap:
    ssid: !secret ap_ssid
    password: !secret ap_password

# ESPHome Captive Portal settings
captive_portal:

# ESPHome MQTT settings
mqtt:
  broker: 192.168.1.59 # Broker IP
  username: !secret mqtt_username # Broker username
  password: !secret mqtt_password # Broker password

  # Topic to post on-connect
  birth_message:
    topic: printer-enclosure/status
    payload: online

  # Topic to post on-disconnect
  will_message:
    topic: printer-enclosure/status
    payload: offline

  # Subscribe to JSON format topics
  on_json_message:
      # Get the current temperature
    - topic: cr6semainsail/klipper/state/temperature_sensor enclosure_temperature/temperature # Topic from Moonraker Config
      then:
        # Set the template sensor, this acts as a virtual sensor
      - sensor.template.publish:
          id: enclosure_temperature_sensor
          # Get the value from the JSON format
          state: !lambda |-
            return x["value"];
    
      # Get the temperature target
    - topic: cr6semainsail/klipper/state/temperature_sensor enclosure_temperature/target # Topic from Moonraker Config
      then:
        # Set the PID control
      - climate.control:
          id: enclosure_pid_controller # Climate controller
          mode: HEAT_COOL
          target_temperature: !lambda |-
            return x["value"];

# ESPHome Climate PID control
climate:
  - platform: pid
    id: enclosure_pid_controller # ID of the PID controller
    name: "PID Enclosure Lights"
    sensor: enclosure_temperature_sensor # Sensor to use as the input
    default_target_temperature: 21°C
    heat_output: enclosure_dimmer # The ESPHome output

    control_parameters:
      kp: 0.0
      ki: 0.0
      kd: 0.0
      output_averaging_samples: 5      # smooth the output over 5 samples
      derivative_averaging_samples: 5  # smooth the derivative value over 10 samples
    deadband_parameters:
      threshold_high: 5.0°C       # deadband within +/-0.5°C of target_temperature
      threshold_low: -5.0°C

    # These settings are required for correct behavior in HomeAssistant
    visual:
      min_temperature: 0 °C
      max_temperature: 65 °C
      temperature_step: 1 °C

    # on_control:
    #   - logger.log: "Control input received; configuration updated!"
    #   - lambda: |-
    #       if (x.get_mode() != CLIMATE_MODE_OFF) {
    #           id(enclosure_lights).set_brightness(0.0f);
    #           x.set_target_temperature(25.0f);
    #       }

# ESPHome sensors
sensor:

  # This sensor acts as a virtual sensor which is updated over MQTT from Moonraker
  - platform: template
    name: "Enclosure Temperature Sensor"
    id: enclosure_temperature_sensor

  # Show PID parameters on MQTT
  - platform: pid
    name: "PID Climate Result"
    climate_id: enclosure_pid_controller
    type: RESULT

  - platform: pid
    name: "PID Climate Error"
    climate_id: enclosure_pid_controller
    type: ERROR

  - platform: pid
    name: "PID Climate Proportional"
    climate_id: enclosure_pid_controller
    type: PROPORTIONAL

  - platform: pid
    name: "PID Climate Integral"
    climate_id: enclosure_pid_controller
    type: INTEGRAL
    
  - platform: pid
    name: "PID Climate Derivative"
    climate_id: enclosure_pid_controller
    type: DERIVATIVE

# ESPHome Output
output:

  # Triac AC dimmer used to control the heating lights in the enclosure
  - platform: ac_dimmer
    id: enclosure_dimmer
    gate_pin: GPIO12 # This is the PWM Output
    zero_cross_pin:
      number: GPIO5 # The is the ZC input
      mode:
        input: true
      inverted: no
    min_power: 0.1 # Set minimum value which will trigger lights
    max_power: 0.99 # Set lower than 100% to prevent flickering
    zero_means_zero: true

# ESPHome Lights
light:
  # This is the heating lights used in the enclosure
  - platform: monochromatic
    id: enclosure_lights
    output: enclosure_dimmer # Is controlled by the dimmer
    name: Enclosure Heating Lights

button:
  - platform: template
    name: "PID Climate Autotune"
    id: enclosure_pid_autotune
    on_press:
      - climate.pid.autotune: enclosure_pid_controller