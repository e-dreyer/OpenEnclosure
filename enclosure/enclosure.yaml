# ESPHome Node settings
esphome:
  name: printer-enclosure

# ESPHome Processor settings
esp32:
  board: esp32doit-devkit-v1
  framework:
    type: arduino

#ESPHome Enable logging
logger:
  level: INFO

# OTA update settings
ota:
  password: !secret ota_password

# Wifi settings
wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  # Wifi-fallback settings for access point
  ap:
    ssid: !secret ap_ssid
    password: !secret ap_password

# ESPHome Captive Portal settings
captive_portal:

# ESPHome MQTT settings
mqtt:
  broker: !secret mqtt_broker # Broker IP
  username: !secret mqtt_username # Broker username
  password: !secret mqtt_password # Broker password

  # Topic to post on-connect
  birth_message:
    topic: printer-enclosure/status
    payload: online

  # Topic to post on-disconnect
  will_message:
    topic: printer-enclosure/status
    payload: offline

  # Subscribe to JSON format topics
  on_json_message:

    # Get the current temperature
    - topic: cr6semainsail/klipper/state/temperature_sensor enclosure_temperature/temperature # Topic from Moonraker Config
      then:
      # Set the template sensor, this acts as a virtual sensor
      - sensor.template.publish:
          id: enclosure_temperature
          # Get the value from the JSON format
          state: !lambda |-
            return x["value"];
    
    # Get the temperature target
    - topic: cr6semainsail/klipper/state/temperature_sensor enclosure_temperature/target # Topic from Moonraker Config
      then:
      # Set the PID control
      - climate.control:
          id: enclosure_climate # Climate controller
          mode: HEAT
          target_temperature: !lambda |-
            return x["value"];

# ESPHome Climate PID control
climate:
  - platform: pid
    id: enclosure_climate # ID of the PID controller
    name: "Enclosure PID"
    sensor: enclosure_temperature # Sensor to use as the input
    default_target_temperature: 21°C
    heat_output: enclosure_dimmer # The ESPHome output

    # Control parameters calculated by autotune
    control_parameters:
      kp: 1.01859 #0.29030
      ki: 0.00328 #0.00087
      kd: 0.0 #79.04271
      output_averaging_samples: 20      # smooth the output over 10 samples
      derivative_averaging_samples: 20  # smooth the derivative value over 10 samples

    # Set deadband to + or - 1.0°C
    deadband_parameters:
      threshold_high: 2.0°C
      threshold_low: -2.0°C

    # These settings are required for correct behavior in HomeAssistant
    visual:
      min_temperature: 0 °C
      max_temperature: 65 °C
      temperature_step: 1 °C

# ESPHome sensors
sensor:

  # This sensor acts as a virtual sensor which is updated over MQTT from Moonraker
  - platform: template
    name: "Temperature"
    id: enclosure_temperature
    device_class: "temperature"
    state_class: "measurement"
    accuracy_decimals: 2
    filters:
      - heartbeat: 1.0s

  # Show PID parameters on MQTT
  - platform: pid
    name: "PID Result"
    id: enclosure_pid_result
    climate_id: enclosure_climate
    type: RESULT
    state_class: "measurement"
    accuracy_decimals: 2
    filters:
      # Help scale the PID output to a value between 0 and 255
      - calibrate_linear:
          - 0.0 -> 0.0
          - 100.0 -> 255.0
      # Send a heartbeat value to smooth PID output
      - heartbeat: 1.0s
      # Sliding window to smooth the temperature
      - sliding_window_moving_average:
          window_size: 20
          send_every: 20
      # Return 0 for negative values
      - lambda: !lambda |-
          if (x < 0) {
            return 0;
          }
          else {
            return x;
          }

  # Used for debugging purposes
  # - platform: pid
  #   name: "PID Error"
  #   id: enclosure_pid_error
  #   climate_id: enclosure_climate
  #   type: ERROR
  #   state_class: "measurement"
  #   accuracy_decimals: 2
  #   filters:
  #     - heartbeat: 1.0s

  # - platform: pid
  #   name: "PID Proportional"
  #   id: enclosure_pid_proportional
  #   climate_id: enclosure_climate
  #   type: PROPORTIONAL
  #   state_class: "measurement"
  #   accuracy_decimals: 2

  # - platform: pid
  #   name: "PID Integral"
  #   id: enclosure_pid_integral
  #   climate_id: enclosure_climate
  #   type: INTEGRAL
  #   state_class: "measurement"
  #   accuracy_decimals: 2
    
  # - platform: pid
  #   name: "PID Derivative"
  #   id: enclosure_pid_derivative
  #   climate_id: enclosure_climate
  #   type: DERIVATIVE
  #   state_class: "measurement"
  #   accuracy_decimals: 2

# ESPHome Output
output:

  # Triac AC dimmer used to control the heating lights in the enclosure
  - platform: ac_dimmer
    id: enclosure_dimmer
    gate_pin: GPIO12 # This is the PWM Output
    
    zero_cross_pin:
      number: GPIO5 # The is the ZC input
      mode:
        input: true

    method: leading

    min_power: 30%
    max_power: 100%
    zero_means_zero: true # A value of zero turns the PID off

# ESPHome Lights
light:
  # This is the heating lights used in the enclosure
  - platform: monochromatic
    id: enclosure_lights
    output: enclosure_dimmer # Is controlled by the dimmer
    name: Enclosure Heating Lights

# ESPHome Button
button:
  # Autotune functionality for the PID in HomeAssistant
  - platform: template
    name: "PID Climate Autotune"
    id: enclosure_pid_autotune
    on_press:
      - climate.pid.autotune: enclosure_climate